name: CI

# Controls when the action will run.
on:
  pull_request:
    branches:
    - main
    - '*-devel'
  pull_request_review:
    branches:
    - main
    - '*-devel'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    if: github.event_name != 'pull_request_review' ||
        contains(github.event.pull_request.labels.*.name, 'auto-pr')
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
        - mode: debug
          flag: -b
          define:
        - mode: debug
          flag: -b
          define: >-
            -DPER_SPECIES_WEIGHT -DZERO_CURRENT_PARTICLES -DNO_PARTICLE_PROBES
            -DPARTICLE_SHAPE_TOPHAT -DPARTICLE_ID -DPHOTONS -DTRIDENT_PHOTONS
            -DBREMSSTRAHLUNG -DPARSER_DEBUG -DNO_IO -DCOLLISIONS_TEST
            -DPER_PARTICLE_CHARGE_MASS -DPARSER_CHECKING -DNO_USE_ISATTY
            -DWORK_DONE_INTEGRATED -DHC_PUSH -DNO_MPI3 -DDECK_DEBUG
        - mode:
          flag:
          define:

    env:
      COMPILER: gfortran
      MPIPROCS: 2
      MODE: ${{ matrix.mode }}
      DEFINE: ${{ matrix.define }}
      GH_BASE: ${{ github.event.pull_request.base.ref }}
      GH_HEAD: ${{ github.event.pull_request.head.ref }}
      GH_SHA: ${{ github.event.pull_request.head.sha }}

    steps:
    - name: Install dependencies
      run: sudo apt update &&
           sudo apt install -y
               python3-dev
               python3-numpy
               python3-nose
               python3-matplotlib
               libpython3-dev
               mpich

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Merge branch
      run: git config user.email "test@example.com" &&
           git config user.name "test" &&
           git checkout -b $GH_HEAD $GH_SHA &&
           git checkout -b $GH_BASE origin/$GH_BASE &&
           git merge --no-ff $GH_HEAD

    - name: Cleanup
      run: cd epoch1d && make cleanall &&
           cd ../epoch2d && make cleanall &&
           cd ../epoch3d && make cleanall

    - name: Compile and run tests
      run: ./scripts/run-tests-epoch-all.sh ${{ matrix.flag }}
